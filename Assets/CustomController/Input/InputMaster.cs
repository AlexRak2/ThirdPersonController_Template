//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/CustomController/Input/InputMaster.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMaster : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMaster()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMaster"",
    ""maps"": [
        {
            ""name"": ""PlayerMechanics"",
            ""id"": ""2809297d-7a68-4897-9e1c-4216b7a64be7"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""3af5b60f-7637-4ebd-b0c6-e4bc13acc1f6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""b1eece06-1a9f-40e1-9904-900bbb9d1c74"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""bdef7612-9117-4461-9f7a-ffa052176cc7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""c12b2ae1-7e00-4c6a-946b-fc52cd75db44"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShoulderSwap"",
                    ""type"": ""Button"",
                    ""id"": ""4cbfd879-d2b8-45b7-bfd9-6693710004e6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Button"",
                    ""id"": ""ad75faa7-9e05-44f0-9fcb-4cdcfb974eab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""539e79f1-e33f-4f4c-8929-5979e92c7687"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""b02dc082-bd48-430b-9300-d22e404d8095"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3434566c-14f0-46cf-8827-04b94d6ff26f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""815dfff8-b9b4-4741-8ad6-04924061cd79"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e9e093db-6ccc-4049-9671-7b3ec8a3e5da"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1b23bd0f-9381-4ff9-8545-ac4cff90b8e9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""ARROW Keys"",
                    ""id"": ""845b2409-6d78-4f07-9330-cbd5438d2227"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c0b429b8-cf1e-400e-84fe-c7292c67135a"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2fa80bbe-e7a5-4da1-8b26-8588e5b80d23"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c8d991e0-e497-45ee-bd5a-49e38a73e768"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4a8822e8-c8c0-404e-8f97-ab6da7c51695"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""72d31139-1470-4153-9079-ca10255511fc"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb1eb8c8-4dd8-4655-b3b7-8a5d13562f77"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9eb1e055-1348-4646-a488-9e4ace007b9f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b3fdb9e0-9ac7-4dab-a130-22f9d28bff43"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""44100331-03c3-4e2f-b030-fa8fecf40422"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6b6e94aa-3519-4d10-8c58-254a77a4b3cc"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": ""ScaleVector2(x=0.2,y=0.2)"",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b7dfe2d-a19e-42b7-aed5-08c612de2862"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""ShoulderSwap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ecd749b3-d193-4822-bbb8-b63d7db19725"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""ShoulderSwap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7cb3215e-0d71-47a1-9ccd-0e99641a87e7"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""847bba06-8591-4a3c-a03f-b68531c184ae"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard and Mouse"",
            ""bindingGroup"": ""Keyboard and Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerMechanics
        m_PlayerMechanics = asset.FindActionMap("PlayerMechanics", throwIfNotFound: true);
        m_PlayerMechanics_Movement = m_PlayerMechanics.FindAction("Movement", throwIfNotFound: true);
        m_PlayerMechanics_Look = m_PlayerMechanics.FindAction("Look", throwIfNotFound: true);
        m_PlayerMechanics_Sprint = m_PlayerMechanics.FindAction("Sprint", throwIfNotFound: true);
        m_PlayerMechanics_Jump = m_PlayerMechanics.FindAction("Jump", throwIfNotFound: true);
        m_PlayerMechanics_ShoulderSwap = m_PlayerMechanics.FindAction("ShoulderSwap", throwIfNotFound: true);
        m_PlayerMechanics_Aim = m_PlayerMechanics.FindAction("Aim", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerMechanics
    private readonly InputActionMap m_PlayerMechanics;
    private IPlayerMechanicsActions m_PlayerMechanicsActionsCallbackInterface;
    private readonly InputAction m_PlayerMechanics_Movement;
    private readonly InputAction m_PlayerMechanics_Look;
    private readonly InputAction m_PlayerMechanics_Sprint;
    private readonly InputAction m_PlayerMechanics_Jump;
    private readonly InputAction m_PlayerMechanics_ShoulderSwap;
    private readonly InputAction m_PlayerMechanics_Aim;
    public struct PlayerMechanicsActions
    {
        private @InputMaster m_Wrapper;
        public PlayerMechanicsActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PlayerMechanics_Movement;
        public InputAction @Look => m_Wrapper.m_PlayerMechanics_Look;
        public InputAction @Sprint => m_Wrapper.m_PlayerMechanics_Sprint;
        public InputAction @Jump => m_Wrapper.m_PlayerMechanics_Jump;
        public InputAction @ShoulderSwap => m_Wrapper.m_PlayerMechanics_ShoulderSwap;
        public InputAction @Aim => m_Wrapper.m_PlayerMechanics_Aim;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMechanics; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMechanicsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMechanicsActions instance)
        {
            if (m_Wrapper.m_PlayerMechanicsActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PlayerMechanicsActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerMechanicsActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerMechanicsActionsCallbackInterface.OnMovement;
                @Look.started -= m_Wrapper.m_PlayerMechanicsActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_PlayerMechanicsActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_PlayerMechanicsActionsCallbackInterface.OnLook;
                @Sprint.started -= m_Wrapper.m_PlayerMechanicsActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_PlayerMechanicsActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_PlayerMechanicsActionsCallbackInterface.OnSprint;
                @Jump.started -= m_Wrapper.m_PlayerMechanicsActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerMechanicsActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerMechanicsActionsCallbackInterface.OnJump;
                @ShoulderSwap.started -= m_Wrapper.m_PlayerMechanicsActionsCallbackInterface.OnShoulderSwap;
                @ShoulderSwap.performed -= m_Wrapper.m_PlayerMechanicsActionsCallbackInterface.OnShoulderSwap;
                @ShoulderSwap.canceled -= m_Wrapper.m_PlayerMechanicsActionsCallbackInterface.OnShoulderSwap;
                @Aim.started -= m_Wrapper.m_PlayerMechanicsActionsCallbackInterface.OnAim;
                @Aim.performed -= m_Wrapper.m_PlayerMechanicsActionsCallbackInterface.OnAim;
                @Aim.canceled -= m_Wrapper.m_PlayerMechanicsActionsCallbackInterface.OnAim;
            }
            m_Wrapper.m_PlayerMechanicsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @ShoulderSwap.started += instance.OnShoulderSwap;
                @ShoulderSwap.performed += instance.OnShoulderSwap;
                @ShoulderSwap.canceled += instance.OnShoulderSwap;
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
            }
        }
    }
    public PlayerMechanicsActions @PlayerMechanics => new PlayerMechanicsActions(this);
    private int m_KeyboardandMouseSchemeIndex = -1;
    public InputControlScheme KeyboardandMouseScheme
    {
        get
        {
            if (m_KeyboardandMouseSchemeIndex == -1) m_KeyboardandMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard and Mouse");
            return asset.controlSchemes[m_KeyboardandMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IPlayerMechanicsActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnShoulderSwap(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
    }
}
